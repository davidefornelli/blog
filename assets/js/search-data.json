{
  
    
        "post0": {
            "title": "Purview | Custom process",
            "content": "Prerequisites . %pip install pyapacheatlas . Collecting pyapacheatlas Downloading pyapacheatlas-0.10.0-py3-none-any.whl (68 kB) |████████████████████████████████| 68 kB 1.9 MB/s Collecting openpyxl&gt;=3.0 Downloading openpyxl-3.0.9-py2.py3-none-any.whl (242 kB) |████████████████████████████████| 242 kB 3.8 MB/s Requirement already satisfied: requests&gt;=2.0 in /home/daforne/repos/github/davidefornelli/blog/.venv/lib/python3.7/site-packages (from pyapacheatlas) (2.26.0) Collecting et-xmlfile Using cached et_xmlfile-1.1.0-py3-none-any.whl (4.7 kB) Requirement already satisfied: certifi&gt;=2017.4.17 in /home/daforne/repos/github/davidefornelli/blog/.venv/lib/python3.7/site-packages (from requests&gt;=2.0-&gt;pyapacheatlas) (2021.10.8) Requirement already satisfied: charset-normalizer~=2.0.0 in /home/daforne/repos/github/davidefornelli/blog/.venv/lib/python3.7/site-packages (from requests&gt;=2.0-&gt;pyapacheatlas) (2.0.7) Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /home/daforne/repos/github/davidefornelli/blog/.venv/lib/python3.7/site-packages (from requests&gt;=2.0-&gt;pyapacheatlas) (1.26.7) Requirement already satisfied: idna&lt;4,&gt;=2.5 in /home/daforne/repos/github/davidefornelli/blog/.venv/lib/python3.7/site-packages (from requests&gt;=2.0-&gt;pyapacheatlas) (3.3) Installing collected packages: et-xmlfile, openpyxl, pyapacheatlas Successfully installed et-xmlfile-1.1.0 openpyxl-3.0.9 pyapacheatlas-0.10.0 Note: you may need to restart the kernel to use updated packages. . Code . Import . from pyapacheatlas.auth import ServicePrincipalAuthentication from pyapacheatlas.core.client import PurviewClient from pyapacheatlas.core.entity import AtlasEntity from pyapacheatlas.core.typedef import EntityTypeDef from pyapacheatlas.core.util import GuidTracker from pyapacheatlas.core.typedef import ChildEndDef from pyapacheatlas.core.typedef import RelationshipTypeDef from pyapacheatlas.core.typedef import ParentEndDef from pyapacheatlas.core.typedef import Cardinality from pyapacheatlas.core.typedef import AtlasAttributeDef from pyapacheatlas.core import AtlasProcess . Settings . tenant_id = &quot;&quot; client_id = &quot;&quot; client_secret = &quot;&quot; purview_name = &quot;&quot; . Clients . atlas_sp = ServicePrincipalAuthentication( tenant_id=tenant_id, client_id=client_id, client_secret=client_secret ) . purview_client = PurviewClient( account_name=purview_name, authentication=atlas_sp ) . Entities . guid_tracker = GuidTracker() . custom_dataset = purview_client.upload_typedefs( entityDefs=[ EntityTypeDef( name=&quot;myCustomDataSet&quot;, superTypes=[&quot;DataSet&quot;] ) ], force_update=True ) . myCustomDataset01 = AtlasEntity( name=&quot;myCustomDataset01&quot;, typeName=&quot;myCustomDataSet&quot;, qualified_name=&quot;pyapacheatlas://mycustomdataset01&quot;, guid=guid_tracker.get_guid() ) myCustomDataset02 = AtlasEntity( name=&quot;myCustomDataset02&quot;, typeName=&quot;myCustomDataSet&quot;, qualified_name=&quot;pyapacheatlas://mycustomdataset02&quot;, guid=guid_tracker.get_guid() ) . myCustomProcess01 = AtlasProcess( name=&quot;myCustomProcess01&quot;, typeName=&quot;Process&quot;, qualified_name=&quot;pyapacheatlas://mycustomprocess01&quot;, inputs=[myCustomDataset01], outputs=[myCustomDataset02], guid=guid_tracker.get_guid() ) . results = purview_client.upload_entities( batch=[myCustomDataset01, myCustomDataset02, myCustomProcess01] ) . Result . Utils . Delete entities . purview_client.delete_typedefs( entityDefs=[ {&quot;name&quot;: &quot;myCustomProcess&quot;}, ] ) .",
            "url": "https://davidefornelli.com/purview/python/jupyter/2021/12/14/nb_purview_01.html",
            "relUrl": "/purview/python/jupyter/2021/12/14/nb_purview_01.html",
            "date": " • Dec 14, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Chef Recipe | How to cook a joke",
            "content": ". Modules . Chef . 400: Invalid request . Ingredients . 400: Invalid request . Call graph . . Configuration . Parameters . gist_user = &#39;davidefornelli&#39; gist_chef_id = &#39;1bc116f05d09e598a1a2dcfbb0e2fc22&#39; gist_ingredients_id = &#39;5c75b7cdea330d15dcd93adbb08648c3&#39; ingredients_to_import = [ (gist_ingredients_id, &#39;joking.py&#39;) ] . Configure environment . %pip install httpimport . Requirement already satisfied: httpimport in /home/daforne/repos/github/davidefornelli/cookbook/.venv/lib/python3.7/site-packages (0.7.2) Note: you may need to restart the kernel to use updated packages. . Import chef . import httpimport with httpimport.remote_repo( [&#39;chef&#39;], f&quot;https://gist.githubusercontent.com/{gist_user}/{gist_chef_id}/raw&quot; ): import chef . Import ingredients . def ingredients_import(ingredients): for ingredient in ingredients: mod, package = chef.process_gist_ingredient( gist_id=ingredient[0], gist_file=ingredient[1], gist_user=gist_user ) globals()[package] = mod ingredients_import(ingredients=ingredients_to_import) . Collecting pyjokes Using cached pyjokes-0.6.0-py2.py3-none-any.whl (26 kB) Installing collected packages: pyjokes Successfully installed pyjokes-0.6.0 . Tell me a joke . joking.tell_me_a_joke() . How many programmers does it take to kill a cockroach? Two: one holds, the other installs Windows on it. .",
            "url": "https://davidefornelli.com/recipe/python/jupyter/2021/11/18/nb_chef_recipe_jokes.html",
            "relUrl": "/recipe/python/jupyter/2021/11/18/nb_chef_recipe_jokes.html",
            "date": " • Nov 18, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Chef Recipe | Extractive summarization with Azure Text Analytics",
            "content": ". Modules . Chef . 400: Invalid request . Ingredients . 400: Invalid request . Call graph . . Configuration . Prerequisites: . Add the .env file in the same folder of the notebook | . Parameters . gist_user = &#39;davidefornelli&#39; gist_chef_id = &#39;1bc116f05d09e598a1a2dcfbb0e2fc22&#39; gist_ingredients_id = &#39;5c75b7cdea330d15dcd93adbb08648c3&#39; ingredients_to_import = [ (gist_ingredients_id, &#39;az_cs_summarization.py&#39;) ] texts = [ &#39;&#39;&#39; A computer is a machine that can be programmed to carry out sequences of arithmetic or logical operations automatically. Modern computers can perform generic sets of operations known as programs. These programs enable computers to perform a wide range of tasks. A computer system is a &quot;complete&quot; computer that includes the hardware, operating system (main software), and peripheral equipment needed and used for &quot;full&quot; operation. This term may also refer to a group of computers that are linked and function together, such as a computer network or computer cluster. A broad range of industrial and consumer products use computers as control systems. Simple special-purpose devices like microwave ovens and remote controls are included, as are factory devices like industrial robots and computer-aided design, as well as general-purpose devices like personal computers and mobile devices like smartphones. Computers power the Internet, which links hundreds of millions of other computers and users. Early computers were meant to be used only for calculations. Simple manual instruments like the abacus have aided people in doing calculations since ancient times. Early in the Industrial Revolution, some mechanical devices were built to automate long tedious tasks, such as guiding patterns for looms. More sophisticated electrical machines did specialized analog calculations in the early 20th century. The first digital electronic calculating machines were developed during World War II. The first semiconductor transistors in the late 1940s were followed by the silicon-based MOSFET (MOS transistor) and monolithic integrated circuit (IC) chip technologies in the late 1950s, leading to the microprocessor and the microcomputer revolution in the 1970s. The speed, power and versatility of computers have been increasing dramatically ever since then, with transistor counts increasing at a rapid pace (as predicted by Moore&#39;s law), leading to the Digital Revolution during the late 20th to early 21st centuries. Conventionally, a modern computer consists of at least one processing element, typically a central processing unit (CPU) in the form of a microprocessor, along with some type of computer memory, typically semiconductor memory chips. The processing element carries out arithmetic and logical operations, and a sequencing and control unit can change the order of operations in response to stored information. Peripheral devices include input devices (keyboards, mice, joystick, etc.), output devices (monitor screens, printers, etc.), and input/output devices that perform both functions (e.g., the 2000s-era touchscreen). Peripheral devices allow information to be retrieved from an external source and they enable the result of operations to be saved and retrieved. &#39;&#39;&#39; ] . Configure environment . %pip install httpimport python-dotenv . Requirement already satisfied: httpimport in /home/daforne/repos/github/davidefornelli/cookbook/.venv/lib/python3.7/site-packages (0.7.2) Requirement already satisfied: python-dotenv in /home/daforne/repos/github/davidefornelli/cookbook/.venv/lib/python3.7/site-packages (0.19.2) Note: you may need to restart the kernel to use updated packages. . Import chef . import httpimport with httpimport.remote_repo( [&#39;chef&#39;], f&quot;https://gist.githubusercontent.com/{gist_user}/{gist_chef_id}/raw&quot; ): import chef . Import ingredients . def ingredients_import(ingredients): for ingredient in ingredients: mod, package = chef.process_gist_ingredient( gist_id=ingredient[0], gist_file=ingredient[1], gist_user=gist_user ) globals()[package] = mod ingredients_import(ingredients=ingredients_to_import) . Extract summaries . import os from dotenv import load_dotenv load_dotenv() # Apply summarization summary_text = az_cs_summarization.summarize( texts=texts, cs_endpoint=os.environ[&#39;CS_TEXTANALYTICS_ENDPOINT&#39;], cs_key=os.environ[&#39;CS_TEXTANALYTICS_KEY&#39;], language=&#39;en&#39; ) . Results . for sx in summary_text: for s in sx.sentences: print(s.text) . A computer is a machine that can be programmed to carry out sequences of arithmetic or logical operations automatically. These programs enable computers to perform a wide range of tasks. A broad range of industrial and consumer products use computers as control systems. .",
            "url": "https://davidefornelli.com/recipe/azuretextanalytics/azure/python/jupyter/2021/11/11/nb_chef_recipe_cs_summarization.html",
            "relUrl": "/recipe/azuretextanalytics/azure/python/jupyter/2021/11/11/nb_chef_recipe_cs_summarization.html",
            "date": " • Nov 11, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "🐱‍💻Github . davidefornelli . | | . 🐱‍🏍WakaTime . @davidefornelli . . 🐱‍👓LinkedIn . Davide Fornelli . 🐱‍🚀Spotify . Songs of the week . 400: Invalid request .",
          "url": "https://davidefornelli.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://davidefornelli.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}